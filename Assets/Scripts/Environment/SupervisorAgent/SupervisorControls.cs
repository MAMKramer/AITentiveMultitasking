//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Environment/SupervisorAgent/SupervisorControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SupervisorControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SupervisorControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SupervisorControls"",
    ""maps"": [
        {
            ""name"": ""Heuristic"",
            ""id"": ""ab7b0c30-efc6-4db9-85e4-cb23dbdac562"",
            ""actions"": [
                {
                    ""name"": ""SwitchLeft"",
                    ""type"": ""Button"",
                    ""id"": ""dab1219c-aa12-4ad2-b747-04d0b7d1820f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRight"",
                    ""type"": ""Button"",
                    ""id"": ""2bca99b9-e912-4282-9568-69e4acec2c33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""0ca227dc-088f-4b89-95f6-e6888d4e026e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1c742fc-ca34-40f9-938f-bb886511c5a0"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""393c2b7a-75a0-49eb-995d-2274102fef22"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1641335a-832c-4226-8c68-f448a30b6f6b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4748720-ad16-4a00-82b3-39786c9b471b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c63ec5a-2235-4db0-ad4e-991cb8f04ca2"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Heuristic
        m_Heuristic = asset.FindActionMap("Heuristic", throwIfNotFound: true);
        m_Heuristic_SwitchLeft = m_Heuristic.FindAction("SwitchLeft", throwIfNotFound: true);
        m_Heuristic_SwitchRight = m_Heuristic.FindAction("SwitchRight", throwIfNotFound: true);
        m_Heuristic_Switch = m_Heuristic.FindAction("Switch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Heuristic
    private readonly InputActionMap m_Heuristic;
    private List<IHeuristicActions> m_HeuristicActionsCallbackInterfaces = new List<IHeuristicActions>();
    private readonly InputAction m_Heuristic_SwitchLeft;
    private readonly InputAction m_Heuristic_SwitchRight;
    private readonly InputAction m_Heuristic_Switch;
    public struct HeuristicActions
    {
        private @SupervisorControls m_Wrapper;
        public HeuristicActions(@SupervisorControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchLeft => m_Wrapper.m_Heuristic_SwitchLeft;
        public InputAction @SwitchRight => m_Wrapper.m_Heuristic_SwitchRight;
        public InputAction @Switch => m_Wrapper.m_Heuristic_Switch;
        public InputActionMap Get() { return m_Wrapper.m_Heuristic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeuristicActions set) { return set.Get(); }
        public void AddCallbacks(IHeuristicActions instance)
        {
            if (instance == null || m_Wrapper.m_HeuristicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeuristicActionsCallbackInterfaces.Add(instance);
            @SwitchLeft.started += instance.OnSwitchLeft;
            @SwitchLeft.performed += instance.OnSwitchLeft;
            @SwitchLeft.canceled += instance.OnSwitchLeft;
            @SwitchRight.started += instance.OnSwitchRight;
            @SwitchRight.performed += instance.OnSwitchRight;
            @SwitchRight.canceled += instance.OnSwitchRight;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(IHeuristicActions instance)
        {
            @SwitchLeft.started -= instance.OnSwitchLeft;
            @SwitchLeft.performed -= instance.OnSwitchLeft;
            @SwitchLeft.canceled -= instance.OnSwitchLeft;
            @SwitchRight.started -= instance.OnSwitchRight;
            @SwitchRight.performed -= instance.OnSwitchRight;
            @SwitchRight.canceled -= instance.OnSwitchRight;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(IHeuristicActions instance)
        {
            if (m_Wrapper.m_HeuristicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeuristicActions instance)
        {
            foreach (var item in m_Wrapper.m_HeuristicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeuristicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeuristicActions @Heuristic => new HeuristicActions(this);
    public interface IHeuristicActions
    {
        void OnSwitchLeft(InputAction.CallbackContext context);
        void OnSwitchRight(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
    }
}
